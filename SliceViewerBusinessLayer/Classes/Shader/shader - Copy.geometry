#version 330 core
uniform mat4 Mvp; 
layout (lines) in;
layout (triangle_strip, max_vertices = 14) out;
in vec4 outColor[];
out vec4 fragcolor;

void main()
{
    vec4 xzOffset = vec4(0.5);

    float zoffset = 0.12;
    vec4 heightOffset = Mvp * vec4(0,0,zoffset,0);
    vec4 realOffset = Mvp * vec4(0.05, 0.05, 0, 0);
    vec3 direction = normalize(gl_in[1].gl_Position.xyz - gl_in[0].gl_Position.xyz);
    vec4 perpendicular = vec4(normalize(cross(direction, heightOffset.xyz)) * realOffset.xyz, 0);
    

    //1
    fragcolor = outColor[1];
	gl_Position = gl_in[1].gl_Position;
    gl_Position -= perpendicular;
    gl_Position += heightOffset;

    EmitVertex();

    //2
    gl_Position = gl_in[1].gl_Position;
    gl_Position += perpendicular;
    gl_Position += heightOffset;
    EmitVertex();

    //3
    gl_Position = gl_in[1].gl_Position;
    gl_Position -= perpendicular;
    gl_Position -= heightOffset;
    EmitVertex();

    //4
    gl_Position = gl_in[1].gl_Position;
    gl_Position += perpendicular;
    gl_Position -= heightOffset;
    EmitVertex();

    //5
    fragcolor = outColor[0];
    gl_Position = gl_in[0].gl_Position;
    gl_Position += perpendicular;
    gl_Position -= heightOffset;
    EmitVertex();

    //6
    fragcolor = outColor[1];
    gl_Position = gl_in[1].gl_Position;
    gl_Position += perpendicular;
    gl_Position += heightOffset;
    EmitVertex();

    //7
    fragcolor = outColor[0];
    gl_Position = gl_in[0].gl_Position;
    gl_Position += perpendicular;
    gl_Position += heightOffset;
    EmitVertex();

    //8
    fragcolor = outColor[1];
	gl_Position = gl_in[1].gl_Position;
    gl_Position -= perpendicular;
    gl_Position += heightOffset;
    EmitVertex();

    //9
    fragcolor = outColor[0];
	gl_Position = gl_in[0].gl_Position;
    gl_Position -= perpendicular;
    gl_Position += heightOffset;
    EmitVertex();

    //10
    fragcolor = outColor[1];
    gl_Position = gl_in[1].gl_Position;
    gl_Position -= perpendicular;
    gl_Position -= heightOffset;
    EmitVertex();

    //11
    fragcolor = outColor[0];
    gl_Position = gl_in[0].gl_Position;
    gl_Position -= perpendicular;
    gl_Position -= heightOffset;
    EmitVertex();

    //12
    fragcolor = outColor[0];
    gl_Position = gl_in[0].gl_Position;
    gl_Position += perpendicular;
    gl_Position -= heightOffset;
    EmitVertex();

    //13
    fragcolor = outColor[0];
	gl_Position = gl_in[0].gl_Position;
    gl_Position -= perpendicular;
    gl_Position += heightOffset;
    EmitVertex();

    //14
    fragcolor = outColor[0];
    gl_Position = gl_in[0].gl_Position;
    gl_Position += perpendicular;
    gl_Position += heightOffset;
    EmitVertex();
    EndPrimitive();
}

void main_old()
{
    
    float offset = 0.12;
    vec4 heightOffset = Mvp * vec4(0,0,offset,0);

    fragcolor = outColor[0];
	gl_Position = gl_in[0].gl_Position; 
    EmitVertex();
    gl_Position = gl_in[0].gl_Position;
    //gl_Position.y += offset;
    gl_Position += heightOffset;
    EmitVertex();

    fragcolor = outColor[1];
    gl_Position = gl_in[1].gl_Position; 
    EmitVertex();
    gl_Position = gl_in[1].gl_Position;
    //gl_Position.y += offset;
    gl_Position += heightOffset;
    EmitVertex();

    EndPrimitive();
}

